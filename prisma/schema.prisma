// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MFAMethod {
  TOTP
  WEB_AUTHN
}

model MFADetail {
  User     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   BigInt
  method   MFAMethod
  secret   String?
  passKeys Passkey[]

  @@id([userId, method])
}

model Passkey {
  id           String   @id
  publicKey    Bytes
  counter      BigInt
  registeredAt DateTime

  mfaDetail       MFADetail @relation(fields: [mfaDetailUserId, mfaDetailMethod], references: [userId, method], onDelete: Cascade)
  mfaDetailUserId BigInt
  mfaDetailMethod MFAMethod
}

model User {
  id         BigInt        @id
  email      String        @unique
  username   String        @unique
  lastRevoke DateTime?
  apps       Application[]
  auths      Auth[]

  // Account security
  passHash     String?
  socialLogins SocialLogin[]
  mfaMethods   MFADetail[]

  // flags
  verified Boolean @default(false)
  admin    Boolean @default(false)
}

enum SocialProvider {
  GOOGLE
  DISCORD
  GITHUB
}

model SocialLogin {
  provider   SocialProvider
  providerId String
  socialName String?
  User       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     BigInt

  @@id([userId, provider])
  @@unique([provider, providerId])
}

model Application {
  id        BigInt     @id
  name      String     @unique
  avatarUrl String?    @map("avatarPath")
  owner     User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   BigInt     @map("userId")
  redirects Redirect[]
  auths     Auth[]

  // flags
  bypassScopes Boolean @default(false)
}

model Redirect {
  id          BigInt      @id
  uri         String
  Application Application @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId       BigInt      @map("applicationId")

  @@unique([uri, appId])
}

model Auth {
  User        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      BigInt
  Application Application @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId       BigInt      @map("applicationId")
  authedAt    DateTime

  jwtSecret String

  @@id([userId, appId])
}
